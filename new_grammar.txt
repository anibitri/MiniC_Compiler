 program ::= extern_list decl_list | decl_list

extern_list ::= extern extern_list'
extern_list' ::= extern extern_list' | epsilon

extern ::= "extern" type_spec IDENT "(" params ")" ";"

decl_list ::= decl decl_list'
decl_list' ::= decl decl_list' | epsilon

decl ::= var_decl   |  fun_decl

var_decl ::= var_type IDENT ";" 

type_spec ::= "void" |  var_type           

var_type  ::= "int" |  "float" |  "bool"

fun_decl ::= type_spec IDENT "(" params ")" block

params ::= param_list  |  "void" | epsilon
    
param_list ::= param param_list' 
param_list' ::= "," param param_list' | epsilon
  
param ::= var_type IDENT

block ::= "{" local_decls stmt_list "}"

local_decls ::= epsilon local_decls'
local_decls' ::= local_decl local_decls' | epsilon

local_decl ::= var_type IDENT ";"

stmt_list ::= epsilon stmt_list'
stmt_list' ::= stmt stmt_list' | epsilon

stmt ::= expr_stmt   |  block   |  if_stmt   |  while_stmt   |  return_stmt

expr_stmt ::= expr ";"  |  ";"

while_stmt ::= "while" "(" expr ")" stmt 

if_stmt ::= "if" "(" expr ")" block else_stmt

else_stmt  ::= "else" block  |  epsilon

return_stmt ::= "return" ";"    |  "return" expr ";"    


#### operators with precedence and no left recursion####

expr ::= IDENT "=" expr | logical_or

logical_or ::= logical_and logical_or'
logical_or' ::= "||" logical_and logical_or' | epsilon

logical_and ::= equality logical_and'
logical_and' ::= "&&" equality logical_and' | epsilon

equality ::= inequality equality'
equality' ::= "==" inequality equality' | "!=" inequality equality' | epsilon

inequality ::= term inequality'
inequality' ::= "<=" term inequality' | "<" term inequality' | ">=" term inequality' | ">" term inequality' | epsilon

term ::= factor term'
term' ::= "+" factor term' | "-" factor term' | epsilon

factor ::= unary factor'
factor' ::= "*" unary factor' | "/" unary factor' | "%" unary factor' | epsilon

unary ::= "-" unary | "!" unary | primary

primary ::= "(" expr ")" | IDENT | IDENT "(" args ")" | NT_LIT | FLOAT_LIT | BOOL_LIT

args ::= arg_list | epsilon

arg_list ::= expr arg_list'
arg_list' ::= "," expr arg_list' | epsilon




###FIRST sets for grammar###

FIRST(program) = {"extern", "int", "float", "bool", "void"}
FIRST(extern_list) = {"extern"}
FIRST(extern_list') = {"extern", epsilon}
FIRST(extern) = {"extern"}
FIRST(decl_list) = {"int", "float", "bool", "void"}
FIRST(decl_list') = {"int", "float", "bool", "void", epsilon}
FIRST(decl) = {"int", "float", "bool", "void"}
FIRST(var_decl) = {"int", "float", "bool"}
FIRST(type_spec) = {"int", "float", "bool", "void"}
FIRST(var_type) = {"int", "float", "bool"}
FIRST(fun_decl) = {"int", "float", "bool", "void"}
FIRST(params) = {"int", "float", "bool", "void", epsilon}
FIRST(param_list) = {"int", "float", "bool"}
FIRST(param_list') = {",", epsilon}
FIRST(param) = {"int", "float", "bool"}
FIRST(block) = {"{"}
FIRST(local_decls) = {"int", "float", "bool", epsilon}
FIRST(local_decls') = {"int", "float", "bool", epsilon}
FIRST(local_decl) = {"int", "float", "bool"}
FIRST(stmt_list) =  {";", IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT, "{", "if", "while", "return", epsilon}
FIRST(stmt_list') = {";", IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT, "{", "if", "while", "return", epsilon}
FIRST(stmt) =  {";", IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT, "{", "if", "while", "return"}
FIRST(expr_stmt) = {IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT, ";"}
FIRST(while_stmt) = {"while"}
FIRST(if_stmt) = {"if"}
FIRST(else_stmt) = {"else", epsilon}
FIRST(return_stmt) = {"return}

FIRST(expr) = {IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT}
FIRST(logical_or) = {IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT}
FIRST(logical_or') = {"||", epsilon}
FIRST(logical_and) = {IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT}
FIRST(logical_and') = {"&&", epsilon}
FIRST(equality) = {IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT}
FIRST(equality') = {"==", "!=", epsilon}
FIRST(inequality) = {IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT}
FIRST(inequality') = {"<=", "<", ">=", ">", epsilon}
FIRST(term) = {IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT}
FIRST(term') = {"+", "-", epsilon}
FIRST(factor) = {IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT}
FIRST(factor') = {"*", "/", "%", epsilon}
FIRST(unary) = {IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT}
FIRST(primary) = {IDENT, "(", NT_LIT, FLOAT_LIT, BOOL_LIT}
FIRST(args) = {IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT, epsilon}
FIRST(arg_list) = {IDENT, "-", "!", "(", NT_LIT, FLOAT_LIT, BOOL_LIT}
FIRST(arg_list') = {",", epsilon}