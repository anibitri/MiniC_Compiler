
#### operators with precedence and no left recursion####

expr ::= IDENT "=" expr | logical_or

logical_or ::= logical_and logical_or'
logical_or' ::= "||" logical_and logical_or' | epsilon

logical_and ::= equality logical_and'
logical_and' ::= "&&" equality logical_and' | epsilon

equality ::= inequality equality'
equality' ::= "==" inequality equality' | "!=" inequality equality' | epsilon

inequality ::= term inequality'
inequality' ::= "<=" term inequality' | "<" term inequality' | ">=" term inequality' | ">" term inequality' | epsilon

term ::= factor term'
term' ::= "+" factor term' | "-" factor term' | epsilon

factor ::= unary factor'
factor' ::= "*" unary factor' | "/" unary factor' | "%" unary factor' | epsilon

unary ::= "-" unary | "!" unary | primary

primary ::= "(" expr ")" | IDENT | IDENT "(" args ")" | NT_LIT | FLOAT_LIT | BOOL_LIT

args ::= arg_list | epsilon

arg_list ::= expr arg_list'
arg_list' ::= "," expr arg_list' | epsilon

